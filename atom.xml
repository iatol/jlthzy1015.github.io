<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jlthzy&#39;s Blog</title>
  
  <subtitle>当我拥着光亮 环着希望</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qaz.jlthzy.cc/"/>
  <updated>2020-04-09T10:11:51.542Z</updated>
  <id>http://qaz.jlthzy.cc/</id>
  
  <author>
    <name>Jlthzy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NLP Week1</title>
    <link href="http://qaz.jlthzy.cc/2020/04/09/NLP_week1/"/>
    <id>http://qaz.jlthzy.cc/2020/04/09/NLP_week1/</id>
    <published>2020-04-09T10:08:20.688Z</published>
    <updated>2020-04-09T10:11:51.542Z</updated>
    
    <content type="html"><![CDATA[<p>NLP课程week1实验</p><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><h4 id="PS-代码写得比较散-封装一下会好看些嘿嘿"><a href="#PS-代码写得比较散-封装一下会好看些嘿嘿" class="headerlink" title="PS 代码写得比较散 封装一下会好看些嘿嘿"></a>PS 代码写得比较散 封装一下会好看些嘿嘿</h4><h4 id="第一周的实验都不太难，要求如下："><a href="#第一周的实验都不太难，要求如下：" class="headerlink" title="第一周的实验都不太难，要求如下："></a>第一周的实验都不太难，要求如下：</h4><h4 id="1-汉字字频统计"><a href="#1-汉字字频统计" class="headerlink" title="1. 汉字字频统计"></a>1. 汉字字频统计</h4><p>1.1 给出前100个汉字高频字的频率统计结果<br>1.2 分别给出1、20、100、600、2000、3000汉字的字频总合<br>1.3 计算汉字的熵值</p><h4 id="2-英文词频统计"><a href="#2-英文词频统计" class="headerlink" title="2.英文词频统计"></a>2.英文词频统计</h4><p>2.1 给出前100个高频单词的频率统计结果<br>2.2 分别给出1、20、100、600、2000、3000单词的字频总合<br>2.3 计算单词的熵值</p><h4 id="3-针对不同规模的语料重复上述实验"><a href="#3-针对不同规模的语料重复上述实验" class="headerlink" title="3. 针对不同规模的语料重复上述实验"></a>3. 针对不同规模的语料重复上述实验</h4><h4 id="4-中文语料来自繁体字版本《孟子》，英文语料来自《哈姆雷特》英文版"><a href="#4-中文语料来自繁体字版本《孟子》，英文语料来自《哈姆雷特》英文版" class="headerlink" title="4.中文语料来自繁体字版本《孟子》，英文语料来自《哈姆雷特》英文版"></a>4.中文语料来自繁体字版本《孟子》，英文语料来自《哈姆雷特》英文版</h4><p>语料下载地址如下<br><a href="https://jlthzy.cc" target="_blank" rel="noopener" title="点我下载孟子">点我下载孟子</a><br><a href="https://jlthzy.cc" target="_blank" rel="noopener" title="点我下载哈姆雷特">点我下载哈姆雷特</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h4 id="1-汉字"><a href="#1-汉字" class="headerlink" title="1.汉字"></a>1.汉字</h4><p>读取文档，统计文章字数和字种数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def loadData(filename):</span><br><span class="line">    f &#x3D; open(filename, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    text&#x3D;f.read()</span><br><span class="line"></span><br><span class="line">    #去掉文档中的标点符号</span><br><span class="line">    for ch in &quot;《》，。：!‧「」『』〈〉；﹖.！ \n？、&quot;:</span><br><span class="line">        text &#x3D; text.replace(ch, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">#     print(&quot;文章总体长度：&quot;, len(text))</span><br><span class="line"></span><br><span class="line">    result &#x3D; set(text)</span><br><span class="line">#     print(&quot;字种数:&quot;, len(result))</span><br><span class="line">    return text</span><br><span class="line"></span><br><span class="line">#a&#x3D;loadData(&#39;ex_menzi.txt&#39;)</span><br></pre></td></tr></table></figure><p>统计每个字的字频</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def sta_word(filename):</span><br><span class="line">    my_dict&#x3D;&#123;&#125;</span><br><span class="line">    text&#x3D;loadData(filename)</span><br><span class="line">    for char in text:</span><br><span class="line">        #在，频率就+1</span><br><span class="line">        if char in my_dict:</span><br><span class="line">            my_dict[char] &#x3D; my_dict[char]+1</span><br><span class="line">        #不在，就创建一个位置给它</span><br><span class="line">        else:</span><br><span class="line">            my_dict[char] &#x3D; 1</span><br><span class="line"></span><br><span class="line">    return my_dict</span><br><span class="line"></span><br><span class="line">#print(sta_word(&#39;ex_menzi.txt&#39;))</span><br></pre></td></tr></table></figure><p>统计并打印前n位高频字的频率以及字频总合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#传入参数n</span><br><span class="line">def sta(n,filename):</span><br><span class="line">    #..........................统计............................#</span><br><span class="line"></span><br><span class="line">    # 创建字典，储存每个高频字及其对应的覆盖率</span><br><span class="line">    rate &#x3D; &#123;&#125;</span><br><span class="line">    # 统计所有高频字出现的总次数(高频字的总字数),统计频数前n位的字出现的次数</span><br><span class="line">    number &#x3D; 0</span><br><span class="line">    #复制,将copy_dict转换成列表并排序</span><br><span class="line">    my_dict&#x3D;sta_word(filename)</span><br><span class="line">    copy_dict&#x3D;my_dict</span><br><span class="line">    copy_dict&#x3D;sorted(copy_dict.items(),key&#x3D;(lambda x:x[1]),reverse&#x3D;True)</span><br><span class="line"></span><br><span class="line">    for word in my_dict.keys():</span><br><span class="line">        if my_dict.get(word, 0) &gt;&#x3D;(copy_dict[n-1][1]) :</span><br><span class="line">            rate[word] &#x3D; my_dict.get(word, 0)&#x2F;len(text)</span><br><span class="line">            number &#x3D; number + my_dict.get(word, 0)</span><br><span class="line">        else:</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">    #..........................输出...........................#</span><br><span class="line"></span><br><span class="line">        # 将字典列表化</span><br><span class="line">    items1 &#x3D; list(rate.items())    </span><br><span class="line"></span><br><span class="line">    # 对列表按照从大到小的顺序来排序</span><br><span class="line">    items1&#x3D;sorted(items1,key&#x3D;(lambda x:x[1]),reverse&#x3D;True)</span><br><span class="line"></span><br><span class="line">    print(f&quot;频数前&#123;n&#125;位的高频字的频率如下：&quot;.format(n))</span><br><span class="line"></span><br><span class="line">    #打印前n位的高频字及其频率</span><br><span class="line">    for i in range(len(items1)):</span><br><span class="line">        word, count &#x3D; items1[i]</span><br><span class="line">        print(word, &quot;  &quot;, &#39;%.2f%%&#39; % (count * 100))  </span><br><span class="line"></span><br><span class="line">    #打印高频字的总的频数和频率</span><br><span class="line">#     print(f&quot;前&#123;n&#125;位高频字的频数是：&#123;number&#125;&quot;.format(n,number))</span><br><span class="line">    print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"># sta(100,&#39;ex_menzi.txt&#39;)</span><br></pre></td></tr></table></figure><p>统计前n位高频字的字频总合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#输入参数n</span><br><span class="line">def sta2(n,filename):</span><br><span class="line">    #.....................统计....................#</span><br><span class="line">    # 创建字典，储存每个高频字及其对应的覆盖率</span><br><span class="line">    rate &#x3D; &#123;&#125;       </span><br><span class="line">    # 统计所有高频字出现的总次数(高频字的总字数),统计频数前n位的字出现的次数</span><br><span class="line">    number &#x3D; 0   </span><br><span class="line">    #复制,将copy_dict转换成列表并排序</span><br><span class="line">    my_dict&#x3D;sta_word(filename)</span><br><span class="line">    copy_dict&#x3D;my_dict</span><br><span class="line">    copy_dict&#x3D;sorted(copy_dict.items(),key&#x3D;(lambda x:x[1]),reverse&#x3D;True)</span><br><span class="line"></span><br><span class="line">    for word in my_dict.keys():</span><br><span class="line">        if my_dict.get(word, 0) &gt;&#x3D;(copy_dict[n-1][1]) :         </span><br><span class="line">            rate[word] &#x3D; my_dict.get(word, 0)&#x2F;len(text)</span><br><span class="line">            number &#x3D; number + my_dict.get(word, 0)</span><br><span class="line">        else:</span><br><span class="line">            continue</span><br><span class="line">    print(f&quot;前&#123;n&#125;位高频字的字频总合是&#123;number&#125;&quot;.format(n,number))</span><br><span class="line">    print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">#sta2(100,&#39;ex_menzi.txt&#39;)</span><br></pre></td></tr></table></figure><p>统计汉字的熵值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def sta3(filename):</span><br><span class="line">    # 创建字典，储存每个高频字及其对应的覆盖率</span><br><span class="line">    rate2 &#x3D; &#123;&#125;       </span><br><span class="line">    #熵值初始化为0</span><br><span class="line">    s&#x3D;0</span><br><span class="line">    #复制,将copy_dict转换成列表并排序</span><br><span class="line">    my_dict&#x3D;sta_word(filename)</span><br><span class="line">    copy_dict2&#x3D;my_dict</span><br><span class="line">    copy_dict2&#x3D;sorted(copy_dict2.items(),key&#x3D;(lambda x:x[1]),reverse&#x3D;True)</span><br><span class="line"></span><br><span class="line">    for word in my_dict.keys():      </span><br><span class="line">        rate2[word] &#x3D; my_dict.get(word, 0)&#x2F;len(text)</span><br><span class="line"></span><br><span class="line">    items2&#x3D;list(rate2.items())    </span><br><span class="line"></span><br><span class="line">    for i in range(len(items2)):</span><br><span class="line">        s-&#x3D;(items2[i][1]*log(items2[i][1],2))</span><br><span class="line"></span><br><span class="line">    print(f&quot;汉字的熵是：&#123;s&#125;&quot;.format(s))</span><br><span class="line">    print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"># sta3(&#39;ex_menzi.txt&#39;)</span><br></pre></td></tr></table></figure><p>今天把几个函数封装了下，重新发上来。核心函数实现了，再套个main函数就ok了。</p><h4 id="2-英文单词"><a href="#2-英文单词" class="headerlink" title="2. 英文单词"></a>2. 英文单词</h4><p>英文单词的其实和中文的差不多。这里需要注意，<code>set</code>函数返回的是字符的种类，如果用在英文语料里面，统计的是字母的种类的而非单词。汉字语句的最小单位是字，英文语句的是字母。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;NLP课程week1实验&lt;/p&gt;
&lt;h2 id=&quot;总述&quot;&gt;&lt;a href=&quot;#总述&quot; class=&quot;headerlink&quot; title=&quot;总述&quot;&gt;&lt;/a&gt;总述&lt;/h2&gt;&lt;h4 id=&quot;PS-代码写得比较散-封装一下会好看些嘿嘿&quot;&gt;&lt;a href=&quot;#PS-代码写得比较散-封
      
    
    </summary>
    
    
    
      <category term="learn" scheme="http://qaz.jlthzy.cc/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://qaz.jlthzy.cc/2020/04/09/hello-world/"/>
    <id>http://qaz.jlthzy.cc/2020/04/09/hello-world/</id>
    <published>2020-04-09T07:47:38.654Z</published>
    <updated>2020-04-09T09:41:16.535Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="see the world" scheme="http://qaz.jlthzy.cc/tags/see-the-world/"/>
    
  </entry>
  
</feed>
